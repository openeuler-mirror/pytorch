From 46b5130221b69f6d5811e237931b579c2b73af41 Mon Sep 17 00:00:00 2001
From: SEmmmer <yjhdandan@163.com>
Date: Fri, 6 May 2022 19:31:51 +0800
Subject: [PATCH] Port breakpad to riscv64

---
 .../dump_writer_common/raw_context_cpu.h      |   2 +
 .../linux/dump_writer_common/thread_info.cc   |  46 +++++++-
 .../linux/dump_writer_common/thread_info.h    |   6 +
 .../dump_writer_common/ucontext_reader.cc     |  17 +++
 .../client/linux/handler/exception_handler.cc |  17 ++-
 .../microdump_writer/microdump_writer.cc      |   4 +-
 .../linux/minidump_writer/linux_dumper.h      |   3 +-
 .../minidump_writer/linux_ptrace_dumper.cc    |   2 +
 .../linux/minidump_writer/minidump_writer.cc  |   8 +-
 .../src/common/linux/breakpad_getcontext.S    |  63 +++++++++++
 .../src/common/linux/memory_mapped_file.cc    |   4 +-
 .../src/common/linux/ucontext_constants.h     |  37 ++++++
 .../common/minidump_cpu_riscv64.h             |  16 +++
 .../google_breakpad/common/minidump_format.h  |   2 +
 .../third_party/lss/linux_syscall_support.h   | 106 +++++++++++++++++-
 .../sleef/src/arch/helperpurec_scalar.h       |   2 +-
 16 files changed, 322 insertions(+), 13 deletions(-)
 create mode 100644 third_party/breakpad/src/google_breakpad/common/minidump_cpu_riscv64.h

diff --git a/third_party/breakpad/src/client/linux/dump_writer_common/raw_context_cpu.h b/third_party/breakpad/src/client/linux/dump_writer_common/raw_context_cpu.h
index 07d9171a..2a0e7239 100644
--- a/third_party/breakpad/src/client/linux/dump_writer_common/raw_context_cpu.h
+++ b/third_party/breakpad/src/client/linux/dump_writer_common/raw_context_cpu.h
@@ -44,6 +44,8 @@ typedef MDRawContextARM RawContextCPU;
 typedef MDRawContextARM64_Old RawContextCPU;
 #elif defined(__mips__)
 typedef MDRawContextMIPS RawContextCPU;
+#elif defined(__riscv)
+typedef MDRawContextRISCV RawContextCPU;
 #else
 #error "This code has not been ported to your platform yet."
 #endif
diff --git a/third_party/breakpad/src/client/linux/dump_writer_common/thread_info.cc b/third_party/breakpad/src/client/linux/dump_writer_common/thread_info.cc
index aae1dc13..3e0a2f6b 100644
--- a/third_party/breakpad/src/client/linux/dump_writer_common/thread_info.cc
+++ b/third_party/breakpad/src/client/linux/dump_writer_common/thread_info.cc
@@ -270,7 +270,51 @@ void ThreadInfo::FillCPUContext(RawContextCPU* out) const {
   out->float_save.fir = mcontext.fpc_eir;
 #endif
 }
-#endif  // __mips__
+
+#elif defined(__riscv)
+
+uintptr_t ThreadInfo::GetInstructionPointer() const {
+    return regs.pc;
+}
+
+void ThreadInfo::FillCPUContext(RawContextCPU* out) const {
+    out->regs[0] = 0;
+    out->regs[1] = regs.ra;
+    out->regs[2] = regs.sp;
+    out->regs[3] = regs.gp;
+    out->regs[4] = regs.tp;
+    out->regs[5] = regs.t0;
+    out->regs[6] = regs.t1;
+    out->regs[7] = regs.t2;
+    out->regs[8] = regs.s0;
+    out->regs[9] = regs.s1;
+    out->regs[10] = regs.a0;
+    out->regs[11] = regs.a1;
+    out->regs[12] = regs.a2;
+    out->regs[13] = regs.a3;
+    out->regs[14] = regs.a4;
+    out->regs[15] = regs.a5;
+    out->regs[16] = regs.a6;
+    out->regs[17] = regs.a7;
+    out->regs[18] = regs.s2;
+    out->regs[19] = regs.s3;
+    out->regs[20] = regs.s4;
+    out->regs[21] = regs.s5;
+    out->regs[22] = regs.s6;
+    out->regs[23] = regs.s7;
+    out->regs[24] = regs.s8;
+    out->regs[25] = regs.s9;
+    out->regs[26] = regs.s10;
+    out->regs[27] = regs.s11;
+    out->regs[28] = regs.t3;
+    out->regs[29] = regs.t4;
+    out->regs[30] = regs.t5;
+    out->regs[31] = regs.t6;
+    out->float_save.fcsr = fpregs.d.fcsr;
+    my_memcpy(out->float_save.regs, fpregs.d.f, sizeof(out->float_save.regs));
+}
+
+#endif  // __riscv
 
 void ThreadInfo::GetGeneralPurposeRegisters(void** gp_regs, size_t* size) {
   assert(gp_regs || size);
diff --git a/third_party/breakpad/src/client/linux/dump_writer_common/thread_info.h b/third_party/breakpad/src/client/linux/dump_writer_common/thread_info.h
index fb216fa6..91418e32 100644
--- a/third_party/breakpad/src/client/linux/dump_writer_common/thread_info.h
+++ b/third_party/breakpad/src/client/linux/dump_writer_common/thread_info.h
@@ -32,6 +32,9 @@
 
 #include <sys/ucontext.h>
 #include <sys/user.h>
+#ifdef __riscv
+#include <asm/ptrace.h>
+#endif
 
 #include "client/linux/dump_writer_common/raw_context_cpu.h"
 #include "common/memory_allocator.h"
@@ -71,6 +74,9 @@ struct ThreadInfo {
 #elif defined(__mips__)
   // Use the structure defined in <sys/ucontext.h>.
   mcontext_t mcontext;
+#elif defined(__riscv)
+  struct user_regs_struct regs;
+  union __riscv_fp_state fpregs;
 #endif
 
   // Returns the instruction pointer (platform-dependent impl.).
diff --git a/third_party/breakpad/src/client/linux/dump_writer_common/ucontext_reader.cc b/third_party/breakpad/src/client/linux/dump_writer_common/ucontext_reader.cc
index 6eec1be2..7a34032b 100644
--- a/third_party/breakpad/src/client/linux/dump_writer_common/ucontext_reader.cc
+++ b/third_party/breakpad/src/client/linux/dump_writer_common/ucontext_reader.cc
@@ -254,6 +254,23 @@ void UContextReader::FillCPUContext(RawContextCPU* out, const ucontext_t* uc) {
   out->float_save.fir = uc->uc_mcontext.fpc_eir;  // Unused.
 #endif
 }
+
+#elif defined(__riscv)
+
+uintptr_t UContextReader::GetStackPointer(const ucontext_t* uc) {
+    return uc->uc_mcontext.__gregs[2];
+}
+
+uintptr_t UContextReader::GetInstructionPointer(const ucontext_t* uc) {
+    return 0;
+}
+
+void UContextReader::FillCPUContext(RawContextCPU* out, const ucontext_t* uc) {
+    out->float_save.fcsr = uc->uc_mcontext.__fpregs.__d.__fcsr;
+    my_memcpy(out->float_save.regs, uc->uc_mcontext.__fpregs.__d.__f, sizeof(out->float_save.regs));
+    my_memcpy(out->regs, uc->uc_mcontext.__gregs, sizeof(out->regs));
+}
+
 #endif
 
 }  // namespace google_breakpad
diff --git a/third_party/breakpad/src/client/linux/handler/exception_handler.cc b/third_party/breakpad/src/client/linux/handler/exception_handler.cc
index ca353c40..29bf349f 100644
--- a/third_party/breakpad/src/client/linux/handler/exception_handler.cc
+++ b/third_party/breakpad/src/client/linux/handler/exception_handler.cc
@@ -138,7 +138,7 @@ void InstallAlternateStackLocked() {
   // SIGSTKSZ may be too small to prevent the signal handlers from overrunning
   // the alternative stack. Ensure that the size of the alternative stack is
   // large enough.
-  static const unsigned kSigStackSize = std::max(16384, SIGSTKSZ);
+  static const size_t kSigStackSize = std::max((size_t)16384, (size_t)SIGSTKSZ);
 
   // Only set an alternative stack if there isn't already one, or if the current
   // one is too small.
@@ -461,7 +461,11 @@ bool ExceptionHandler::HandleSignal(int /*sig*/, siginfo_t* info, void* uc) {
     memcpy(&g_crash_context_.float_state, fp_ptr,
            sizeof(g_crash_context_.float_state));
   }
-#elif !defined(__ARM_EABI__) && !defined(__mips__)
+#elif defined(__riscv)
+    ucontext_t* uc_ptr = (ucontext_t*)uc;
+    memcpy(&g_crash_context_.float_state, &uc_ptr->uc_mcontext.__fpregs,
+           sizeof(g_crash_context_.float_state));
+#elif !defined(__ARM_EABI__) && !defined(__mips__) &&!defined(__riscv)
   // FP state is not part of user ABI on ARM Linux.
   // In case of MIPS Linux FP state is already part of ucontext_t
   // and 'float_state' is not a member of CrashContext.
@@ -701,7 +705,12 @@ bool ExceptionHandler::WriteMinidump() {
   }
 #endif
 
-#if !defined(__ARM_EABI__) && !defined(__aarch64__) && !defined(__mips__)
+#if defined(__riscv)
+  memcpy(&context.float_state, &context.context.uc_mcontext.__fpregs,
+         sizeof(context.float_state));
+#endif
+
+#if !defined(__ARM_EABI__) && !defined(__aarch64__) && !defined(__mips__) && !defined(__riscv)
   // FPU state is not part of ARM EABI ucontext_t.
   memcpy(&context.float_state, context.context.uc_mcontext.fpregs,
          sizeof(context.float_state));
@@ -726,6 +735,8 @@ bool ExceptionHandler::WriteMinidump() {
 #elif defined(__mips__)
   context.siginfo.si_addr =
       reinterpret_cast<void*>(context.context.uc_mcontext.pc);
+#elif defined(__riscv)
+  context.siginfo.si_addr = nullptr;
 #else
 #error "This code has not been ported to your platform yet."
 #endif
diff --git a/third_party/breakpad/src/client/linux/microdump_writer/microdump_writer.cc b/third_party/breakpad/src/client/linux/microdump_writer/microdump_writer.cc
index fa3c1713..44971f5f 100644
--- a/third_party/breakpad/src/client/linux/microdump_writer/microdump_writer.cc
+++ b/third_party/breakpad/src/client/linux/microdump_writer/microdump_writer.cc
@@ -337,6 +337,8 @@ class MicrodumpWriter {
 # else
 #  error "This mips ABI is currently not supported (n32)"
 #endif
+#elif defined(__riscv)
+    const char kArch[] = "riscv64";
 #else
 #error "This code has not been ported to your platform yet"
 #endif
@@ -409,7 +411,7 @@ class MicrodumpWriter {
   void DumpCPUState() {
     RawContextCPU cpu;
     my_memset(&cpu, 0, sizeof(RawContextCPU));
-#if !defined(__ARM_EABI__) && !defined(__mips__)
+#if !defined(__ARM_EABI__) && !defined(__mips__) && !defined(__riscv)
     UContextReader::FillCPUContext(&cpu, ucontext_, float_state_);
 #else
     UContextReader::FillCPUContext(&cpu, ucontext_);
diff --git a/third_party/breakpad/src/client/linux/minidump_writer/linux_dumper.h b/third_party/breakpad/src/client/linux/minidump_writer/linux_dumper.h
index 7bee160f..df04e2c0 100644
--- a/third_party/breakpad/src/client/linux/minidump_writer/linux_dumper.h
+++ b/third_party/breakpad/src/client/linux/minidump_writer/linux_dumper.h
@@ -63,7 +63,8 @@ namespace google_breakpad {
  (defined(__mips__) && _MIPS_SIM == _ABIO32)
 typedef Elf32_auxv_t elf_aux_entry;
 #elif defined(__x86_64) || defined(__aarch64__) || \
-     (defined(__mips__) && _MIPS_SIM != _ABIO32)
+     (defined(__mips__) && _MIPS_SIM != _ABIO32) || \
+     (defined(__riscv) && __riscv_xlen == 64)
 typedef Elf64_auxv_t elf_aux_entry;
 #endif
 
diff --git a/third_party/breakpad/src/client/linux/minidump_writer/linux_ptrace_dumper.cc b/third_party/breakpad/src/client/linux/minidump_writer/linux_ptrace_dumper.cc
index e3ddb81a..6908bf2c 100644
--- a/third_party/breakpad/src/client/linux/minidump_writer/linux_ptrace_dumper.cc
+++ b/third_party/breakpad/src/client/linux/minidump_writer/linux_ptrace_dumper.cc
@@ -298,6 +298,8 @@ bool LinuxPtraceDumper::GetThreadInfoByIndex(size_t index, ThreadInfo* info) {
 #elif defined(__mips__)
   stack_pointer =
       reinterpret_cast<uint8_t*>(info->mcontext.gregs[MD_CONTEXT_MIPS_REG_SP]);
+#elif defined(__riscv)
+  my_memcpy(&stack_pointer, &info->regs.sp, sizeof(info->regs.sp));
 #else
 #error "This code hasn't been ported to your platform yet."
 #endif
diff --git a/third_party/breakpad/src/client/linux/minidump_writer/minidump_writer.cc b/third_party/breakpad/src/client/linux/minidump_writer/minidump_writer.cc
index 32634ef0..a7d412c2 100644
--- a/third_party/breakpad/src/client/linux/minidump_writer/minidump_writer.cc
+++ b/third_party/breakpad/src/client/linux/minidump_writer/minidump_writer.cc
@@ -468,7 +468,7 @@ class MinidumpWriter {
         if (!cpu.Allocate())
           return false;
         my_memset(cpu.get(), 0, sizeof(RawContextCPU));
-#if !defined(__ARM_EABI__) && !defined(__mips__)
+#if !defined(__ARM_EABI__) && !defined(__mips__) && !defined(__riscv)
         UContextReader::FillCPUContext(cpu.get(), ucontext_, float_state_);
 #else
         UContextReader::FillCPUContext(cpu.get(), ucontext_);
@@ -1205,6 +1205,12 @@ class MinidumpWriter {
 
     return true;
   }
+#elif defined(__riscv)
+  bool WriteCPUInformation(MDRawSystemInfo* sys_info) {
+      sys_info->processor_architecture = MD_CPU_ARCHITECTURE_RISCV64;
+      sys_info->number_of_processors = 8; // TODO: For me only
+      return true;
+  }
 #else
 #  error "Unsupported CPU"
 #endif
diff --git a/third_party/breakpad/src/common/linux/breakpad_getcontext.S b/third_party/breakpad/src/common/linux/breakpad_getcontext.S
index 528dba7a..1ca99b50 100644
--- a/third_party/breakpad/src/common/linux/breakpad_getcontext.S
+++ b/third_party/breakpad/src/common/linux/breakpad_getcontext.S
@@ -481,6 +481,69 @@ breakpad_getcontext:
   .cfi_endproc
   .size breakpad_getcontext, . - breakpad_getcontext
 
+#elif defined(__riscv)
+
+#include <sys/syscall.h>
+
+  .text
+  .global breakpad_getcontext
+  .hidden breakpad_getcontext
+  .type breakpad_getcontext, @function
+  .align 4
+breakpad_getcontext:
+  /* sepc and mepc is not readable in user mode */
+  /* just set it to zero */
+  sd x0,  MCONTEXT_GREGS_PC(a0)
+  sd ra,  MCONTEXT_GREGS_RA(a0)
+  sd sp,  MCONTEXT_GREGS_SP(a0)
+  sd gp,  MCONTEXT_GREGS_GP(a0)
+  sd tp,  MCONTEXT_GREGS_TP(a0)
+  sd t0,  MCONTEXT_GREGS_T0(a0)
+  sd t1,  MCONTEXT_GREGS_T1(a0)
+  sd t2,  MCONTEXT_GREGS_T2(a0)
+  sd s0,  MCONTEXT_GREGS_S0(a0)
+  sd s1,  MCONTEXT_GREGS_S1(a0)
+  sd a0,  MCONTEXT_GREGS_A0(a0)
+  sd a1,  MCONTEXT_GREGS_A1(a0)
+  sd a2,  MCONTEXT_GREGS_A2(a0)
+  sd a3,  MCONTEXT_GREGS_A3(a0)
+  sd a4,  MCONTEXT_GREGS_A4(a0)
+  sd a5,  MCONTEXT_GREGS_A5(a0)
+  sd a6,  MCONTEXT_GREGS_A6(a0)
+  sd a7,  MCONTEXT_GREGS_A7(a0)
+  sd s2,  MCONTEXT_GREGS_S2(a0)
+  sd s3,  MCONTEXT_GREGS_S3(a0)
+  sd s4,  MCONTEXT_GREGS_S4(a0)
+  sd s5,  MCONTEXT_GREGS_S5(a0)
+  sd s6,  MCONTEXT_GREGS_S6(a0)
+  sd s7,  MCONTEXT_GREGS_S7(a0)
+  sd s8,  MCONTEXT_GREGS_S8(a0)
+  sd s9,  MCONTEXT_GREGS_S9(a0)
+  sd s10, MCONTEXT_GREGS_S10(a0)
+  sd s11, MCONTEXT_GREGS_S11(a0)
+  sd t3,  MCONTEXT_GREGS_T3(a0)
+  sd t4,  MCONTEXT_GREGS_T4(a0)
+  sd t5,  MCONTEXT_GREGS_T5(a0)
+  sd t6,  MCONTEXT_GREGS_T6(a0)
+
+  /* save the current ucontext_t pointer */
+  mv t0, a0
+  /* rt_sigprocmask (SIG_BLOCK, NULL, &ucp->uc_sigmask, _NSIG8) */
+  mv a0, zero /* SIG_BLOCK */
+  mv a1, zero /* NULL */
+  addi a2, t0, UCONTEXT_SIGMASK_OFFSET 
+  li a3, 8 /* NSIG/8, namely sizeof(sigset_t) */
+  li a7, __NR_rt_sigprocmask /* syscall */
+  ecall
+
+  /* Always return 0 for success, even if sigprocmask failed. */
+  mv a0, zero
+  ret
+
+  .size breakpad_getcontext, . - breakpad_getcontext
+
+
+
 #else
 #error "This file has not been ported for your CPU!"
 #endif
diff --git a/third_party/breakpad/src/common/linux/memory_mapped_file.cc b/third_party/breakpad/src/common/linux/memory_mapped_file.cc
index 99362945..dff4c23a 100644
--- a/third_party/breakpad/src/common/linux/memory_mapped_file.cc
+++ b/third_party/breakpad/src/common/linux/memory_mapped_file.cc
@@ -65,8 +65,8 @@ bool MemoryMappedFile::Map(const char* path, size_t offset) {
   }
 
 #if defined(__x86_64__) || defined(__aarch64__) || \
-   (defined(__mips__) && _MIPS_SIM == _ABI64)
-
+   (defined(__mips__) && _MIPS_SIM == _ABI64) ||   \
+   (defined(__riscv) && __riscv_xlen == 64)
   struct kernel_stat st;
   if (sys_fstat(fd, &st) == -1 || st.st_size < 0) {
 #else
diff --git a/third_party/breakpad/src/common/linux/ucontext_constants.h b/third_party/breakpad/src/common/linux/ucontext_constants.h
index c390508a..79fcbf62 100644
--- a/third_party/breakpad/src/common/linux/ucontext_constants.h
+++ b/third_party/breakpad/src/common/linux/ucontext_constants.h
@@ -146,6 +146,43 @@
 #endif
 #define FPREGS_OFFSET_MXCSR  24
 
+#elif defined(__riscv)
+#define MCONTEXT_GREGS_OFFSET     40
+#define UCONTEXT_SIGMASK_OFFSET   176
+
+#define MCONTEXT_GREGS_PC    176
+#define MCONTEXT_GREGS_RA    184
+#define MCONTEXT_GREGS_SP    192
+#define MCONTEXT_GREGS_GP    200
+#define MCONTEXT_GREGS_TP    208
+#define MCONTEXT_GREGS_T0    216
+#define MCONTEXT_GREGS_T1    224
+#define MCONTEXT_GREGS_T2    232
+#define MCONTEXT_GREGS_S0    240
+#define MCONTEXT_GREGS_S1    248
+#define MCONTEXT_GREGS_A0    256
+#define MCONTEXT_GREGS_A1    264
+#define MCONTEXT_GREGS_A2    272
+#define MCONTEXT_GREGS_A3    280
+#define MCONTEXT_GREGS_A4    288
+#define MCONTEXT_GREGS_A5    296
+#define MCONTEXT_GREGS_A6    304
+#define MCONTEXT_GREGS_A7    312
+#define MCONTEXT_GREGS_S2    320
+#define MCONTEXT_GREGS_S3    328
+#define MCONTEXT_GREGS_S4    336
+#define MCONTEXT_GREGS_S5    344
+#define MCONTEXT_GREGS_S6    352
+#define MCONTEXT_GREGS_S7    360
+#define MCONTEXT_GREGS_S8    368
+#define MCONTEXT_GREGS_S9    376
+#define MCONTEXT_GREGS_S10   384
+#define MCONTEXT_GREGS_S11   392
+#define MCONTEXT_GREGS_T3    400
+#define MCONTEXT_GREGS_T4    408
+#define MCONTEXT_GREGS_T5    416
+#define MCONTEXT_GREGS_T6    424
+
 #else
 #error "This header has not been ported for your CPU"
 #endif
diff --git a/third_party/breakpad/src/google_breakpad/common/minidump_cpu_riscv64.h b/third_party/breakpad/src/google_breakpad/common/minidump_cpu_riscv64.h
new file mode 100644
index 00000000..0b85ba86
--- /dev/null
+++ b/third_party/breakpad/src/google_breakpad/common/minidump_cpu_riscv64.h
@@ -0,0 +1,16 @@
+#ifndef GOOGLE_BREAKPAD_COMMON_MINIDUMP_CPU_RISCV64_H__
+#define GOOGLE_BREAKPAD_COMMON_MINIDUMP_CPU_RISCV64_H__
+
+#include "google_breakpad/common/breakpad_types.h"
+
+typedef struct {
+  uint64_t regs[32];
+  uint32_t fcsr;
+} MDFloatingSaveAreaRISCV;
+
+typedef struct {
+  uint64_t regs[32];
+  MDFloatingSaveAreaRISCV float_save;
+} MDRawContextRISCV;
+
+#endif
diff --git a/third_party/breakpad/src/google_breakpad/common/minidump_format.h b/third_party/breakpad/src/google_breakpad/common/minidump_format.h
index 7b36d112..5f6fdf76 100644
--- a/third_party/breakpad/src/google_breakpad/common/minidump_format.h
+++ b/third_party/breakpad/src/google_breakpad/common/minidump_format.h
@@ -120,6 +120,7 @@ typedef struct {
 #include "minidump_cpu_ppc64.h"
 #include "minidump_cpu_sparc.h"
 #include "minidump_cpu_x86.h"
+#include "minidump_cpu_riscv64.h"
 
 /*
  * WinVer.h
@@ -660,6 +661,7 @@ typedef enum {
   MD_CPU_ARCHITECTURE_PPC64     = 0x8002, /* Breakpad-defined value for PPC64 */
   MD_CPU_ARCHITECTURE_ARM64_OLD = 0x8003, /* Breakpad-defined value for ARM64 */
   MD_CPU_ARCHITECTURE_MIPS64    = 0x8004, /* Breakpad-defined value for MIPS64 */
+  MD_CPU_ARCHITECTURE_RISCV64   = 0x8005, /* Breakpad-defined value for RISCV64 */
   MD_CPU_ARCHITECTURE_UNKNOWN   = 0xffff  /* PROCESSOR_ARCHITECTURE_UNKNOWN */
 } MDCPUArchitecture;
 
diff --git a/third_party/breakpad/src/third_party/lss/linux_syscall_support.h b/third_party/breakpad/src/third_party/lss/linux_syscall_support.h
index d3791cd4..77ebbbc0 100644
--- a/third_party/breakpad/src/third_party/lss/linux_syscall_support.h
+++ b/third_party/breakpad/src/third_party/lss/linux_syscall_support.h
@@ -88,7 +88,8 @@
  */
 #if (defined(__i386__) || defined(__x86_64__) || defined(__ARM_ARCH_3__) ||   \
      defined(__mips__) || defined(__PPC__) || defined(__ARM_EABI__) || \
-     defined(__aarch64__) || defined(__s390__) || defined(__e2k__))  \
+     defined(__aarch64__) || defined(__s390__) || defined(__e2k__)) ||        \
+     (defined(__riscv) && __riscv_xlen == 64) \
   && (defined(__linux) || defined(__ANDROID__))
 
 #ifndef SYS_CPLUSPLUS
@@ -215,6 +216,7 @@ struct kernel_dirent64 {
 #if !defined(__NR_getdents)
 // when getdents is not available, getdents64 is used for both.
 #define kernel_dirent kernel_dirent64
+#define __NR_getdents __NR_getdents64
 #else
 struct kernel_dirent {
   long               d_ino;
@@ -628,6 +630,29 @@ struct kernel_stat {
   unsigned long      st_ctime_;
   unsigned long      st_ctime_nsec_;
 };
+#elif defined(__riscv)
+struct kernel_stat{
+    unsigned long st_dev;		    /* Device.  */
+    unsigned long st_ino;           /* File serial number. */
+    unsigned int st_mode;	    	/* File mode.  */
+    unsigned int st_nlink;	    	/* Link count.  */
+    unsigned int st_uid;	    	/* User ID of the file's owner.	*/
+    unsigned int st_gid;		    /* Group ID of the file's group.*/
+    unsigned long st_rdev;	    	/* Device number, if device.  */
+    unsigned long __pad1;
+    long st_size;                   /* Size of file, in bytes. */
+    int st_blksize;	                /* Optimal block size for I/O.  */
+    int __pad2;
+    long st_blocks;                 /* 512-byte blocks */
+
+    long st_atime_;			        /* Time of last access.  */
+    unsigned long st_atime_nsec_;	/* Nscecs of last access.  */
+    long st_mtime_;			        /* Time of last modification.  */
+    unsigned long st_mtime_nsec_;	/* Nsecs of last modification.  */
+    long st_ctime_;			        /* Time of last status change.  */
+    unsigned long st_ctime_nsec_;	/* Nsecs of last status change.  */
+    int __glibc_reserved[2];
+};
 #endif
 
 /* include/asm-{arm,aarch64,i386,mips,x86_64,ppc,s390}/statfs.h              */
@@ -1926,7 +1951,7 @@ struct kernel_statfs {
   #undef  LSS_RETURN
   #if defined(__i386__) || defined(__x86_64__) || defined(__ARM_ARCH_3__) \
        || defined(__ARM_EABI__) || defined(__aarch64__) || defined(__s390__) \
-       || defined(__e2k__)
+       || defined(__e2k__) || defined(__riscv)
   /* Failing system calls return a negative result in the range of
    * -1..-4095. These are "errno" values with the sign inverted.
    */
@@ -3671,6 +3696,76 @@ struct kernel_statfs {
                               "b[4]", "b[5]", "pred0");
       LSS_RETURN(int, __res);
     }
+  #elif defined(__riscv)
+    #undef LSS_REG
+    #define LSS_REG(r,a) register int64_t __r##r __asm__("a"#r) = (int64_t)a
+    #undef  LSS_BODY
+    #define LSS_BODY(type,name,args...)                                       \
+          register int64_t __res_a0 __asm__("a0");                            \
+          int64_t __res;                                                      \
+          __asm__ __volatile__ ("li a7, %1\n"                                 \
+                                "ecall\n"                                     \
+                                : "=r"(__res_a0)                              \
+                                : "i"(__NR_##name) , ## args                  \
+                                : "a7", "memory");                            \
+          __res = __res_a0;                                                   \
+          LSS_RETURN(type, __res)
+
+    #undef _syscall0
+    #define _syscall0(type, name)                                             \
+          type LSS_NAME(name)(void) {                                         \
+            LSS_BODY(type, name);                                             \
+          }
+    #undef _syscall1
+    #define _syscall1(type, name, type1, arg1)                                \
+          type LSS_NAME(name)(type1 arg1) {                                   \
+            LSS_REG(0, arg1); LSS_BODY(type, name, "r"(__r0));                \
+          }
+    #undef _syscall2
+    #define _syscall2(type, name, type1, arg1, type2, arg2)                   \
+          type LSS_NAME(name)(type1 arg1, type2 arg2) {                       \
+            LSS_REG(0, arg1); LSS_REG(1, arg2);                               \
+            LSS_BODY(type, name, "r"(__r0), "r"(__r1));                       \
+          }
+    #undef _syscall3
+    #define _syscall3(type, name, type1, arg1, type2, arg2, type3, arg3)      \
+          type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3) {           \
+            LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);             \
+            LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2));            \
+          }
+    #undef _syscall4
+    #define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)      \
+          type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {   \
+            LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
+            LSS_REG(3, arg4);                                                     \
+            LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3));     \
+          }
+    #undef _syscall5
+    #define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,      \
+                          type5,arg5)                                             \
+          type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
+                              type5 arg5) {                                       \
+            LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
+            LSS_REG(3, arg4); LSS_REG(4, arg5);                                   \
+            LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3),      \
+                                 "r"(__r4));                                      \
+          }
+    #undef _syscall6
+    #define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,  \
+                      type5,arg5,type6,arg6)                                  \
+      type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
+                          type5 arg5, type6 arg6) {                           \
+        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
+        LSS_REG(3, arg4); LSS_REG(4, arg5); LSS_REG(5, arg6);                 \
+        LSS_BODY(type, name, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3),      \
+                             "r"(__r4), "r"(__r5));                           \
+      }
+    LSS_INLINE int LSS_NAME(clone)(int (*fn)(void *), void *child_stack,
+                                   int flags, void *arg, int *parent_tidptr,
+                                   void *newtls, int *child_tidptr) {
+        return clone(fn, child_stack, flags, arg,
+                     parent_tidptr, newtls, child_tidptr);
+    }
 
   #endif
   #define __NR__exit   __NR_exit
@@ -4484,7 +4579,7 @@ struct kernel_statfs {
       LSS_SC_BODY(4, int, 8, d, type, protocol, sv);
     }
   #endif
-  #if defined(__ARM_EABI__) || defined (__aarch64__)
+  #if defined(__ARM_EABI__) || defined (__aarch64__) || defined(__riscv)
     LSS_INLINE _syscall3(ssize_t, recvmsg, int, s, struct kernel_msghdr*, msg,
                          int, flags)
     LSS_INLINE _syscall3(ssize_t, sendmsg, int, s, const struct kernel_msghdr*,
@@ -4845,6 +4940,11 @@ struct kernel_statfs {
              LSS_SYSCALL_ARG(child_stack), LSS_SYSCALL_ARG(parent_tidptr),
              LSS_SYSCALL_ARG(newtls), LSS_SYSCALL_ARG(child_tidptr));
   }
+#elif defined(__riscv)
+#include <unistd.h>
+LSS_INLINE pid_t LSS_NAME(fork)(void) {
+    return fork();
+}
 # else
 #  error missing fork polyfill for this architecture
 # endif
diff --git a/third_party/sleef/src/arch/helperpurec_scalar.h b/third_party/sleef/src/arch/helperpurec_scalar.h
index e77e518f..f28c2b83 100644
--- a/third_party/sleef/src/arch/helperpurec_scalar.h
+++ b/third_party/sleef/src/arch/helperpurec_scalar.h
@@ -54,7 +54,7 @@
 #define ENABLE_FMA_SP
 //@#define ENABLE_FMA_SP
 
-#if defined(__AVX2__) || defined(__aarch64__) || defined(__arm__) || defined(__powerpc64__) || defined(__zarch__) || CONFIG == 3
+#if defined(__AVX2__) || defined(__aarch64__) || defined(__arm__) || defined(__powerpc64__) || defined(__zarch__) || defined(__riscv) || CONFIG == 3
 #ifndef FP_FAST_FMA
 #define FP_FAST_FMA
 //@#define FP_FAST_FMA
-- 
2.30.2

